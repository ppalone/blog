---
import {
  CollectionEntry,
  getCollection,
  getEntries,
  getEntry,
} from "astro:content";
import { formatDate } from "@utils/format";

import "@assets/markdown.css";

interface Props {
  blog: CollectionEntry<"blogs">;
}

const { blog } = Astro.props;
const folder = await getEntry("folders", blog.data.folder.id);
const blogs = await getCollection("blogs", ({ data }) => {
  return data.draft === false && data.folder.id === folder.id;
});
const { Content } = await blog.render();
const current = blog;
const UNCATEGORIZED = "uncategorized";
---

<article>
  <header>
    <h1 class="text-4xl font-bold">
      {blog.data.title}
    </h1>

    <div class="flex gap-2 my-4 items-center">
      <span>{formatDate(blog.data.date)}</span>
      <span>&bull;</span>
      <a href={"/folders/" + folder.id} class="folder">{folder.data.name}</a>
    </div>

    <p class="my-4">{blog.data.description}</p>
  </header>

  { (folder.id !== UNCATEGORIZED) &&
    (
      <div class="flex flex-col border rounded-sm">
        <div class="p-2 text-lg flex items-center gap-2 border-b text-lg">
          ðŸ“‚ {folder.data.name}
        </div>
        {blogs.map((blog, idx) => {
          return (
            <a
              href={"/blogs/" + blog.slug}
              class:list={[
                "p-2 flex items-center gap-2 border-t bg-gray-50 dark:bg-slate-700",
                blog.id === current.id ? "font-bold" : "",
              ]}
            >
              <span
                class:list={[
                  "w-8 h-8 border rounded-full flex items-center justify-center",
                  blog.id === current.id
                    ? "bg-pink-400 text-white border-pink-400"
                    : "bg-white text-stone-900",
                ]}
              >
                {idx + 1}
              </span>
              <span class="flex-1">{blog.data.title}</span>
            </a>
          );
        })}
      </div>
    )
  }

  <section class="markdown-content">
    <Content />
  </section>
</article>
